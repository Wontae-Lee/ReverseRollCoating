/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |				
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  9                                   	
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    format      ascii;
    class       dictionary;
    object      snappyHexMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

castellatedMesh true;
snap            true;
addLayers       false;

geometry
{
    
    rollRight.stl
    {
        type triSurfaceMesh;
        name rollRight;
    }

    
    rollRight_area.stl
    {
        type triSurfaceMesh;
        name rollRight_area;
    }

    box
    {
    	type searchableBox;

        min ( -0.3 -0.3 0.3 );
        max ( 0.3 0.3 0.3 );
    }

};

// Settings for the castellatedMesh generation.
castellatedMeshControls
{

    // Refinement parameters
    // ~~~~~~~~~~~~~~~~~~~~~

    maxLocalCells 100000;

    maxGlobalCells 2000000;

    minRefinementCells 10;

    maxLoadUnbalance 0.10;

    //nCellsBetweenLevels 1;
    nCellsBetweenLevels 2;

    // Explicit feature edge refinement
    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    features
    (
    	{
             file "rollRight.eMesh";
             level 0;
             //level 1;
         }


         {
             file "rollRight_area.eMesh";
             level 0;
             //level 2;
             //level 4;
             //level 6;
         }

    );

    // Surface based refinement
    // ~~~~~~~~~~~~~~~~~~~~~~~~

    refinementSurfaces
    {

		
		rollRight
        {
			//level (2 2);
            level (0 0);

            patchInfo
            {
                type wall;
            }
		}

	
        rollRight_area
        {
	    	//level (0 0);
            level (1 1);
	    	//level (1 2);
	    	//level (2 2);

            cellZone cell_inner_volume;
            faceZone face_inner_volume;

	    	faceType internal;

	    	//cellZoneInside inside;
            cellZoneInside insidePoint;
            insidePoint (0.0 0.0 0.0);
        }

/*
		cylinder
        {
			level (0 0);

            faceZone face_inner;
            cellZone cell_inner;

            cellZoneInside inside;

            //cellZoneInside inside;  //outside/insidePoint
            //- Optional specification of what to do with faceZone faces:
            //      internal : keep them as internal faces (default)
            //      baffle   : create baffles from them. This gives more
            //                 freedom in mesh motion
            //      boundary : create free-standing boundary faces (baffles
            //                 but without the shared points)
            //faceType baffle;
		}
*/

    }

    // Feature angle:
    // - used if min and max refinement level of a surface differ
    // - used if feature snapping (see snapControls below) is used
    //resolveFeatureAngle 10;
    resolveFeatureAngle 30;		//default

    //- Optional increment (on top of max level) in small gaps
    //gapLevelIncrement 2;

    planarAngle 30;

    // Region-wise refinement
    // ~~~~~~~~~~~~~~~~~~~~~~

    refinementRegions
    {
/*
		box
        {
			mode inside;
            levels  (( 1 1 ));
            //levels  (( 2 2 ));
            //levels  (( 4 4 ));
		}
*/

/*
		cylinder
        {
			mode inside;
            //levels (( 0 0 ));
            levels (( 1 1 ));
            //levels (( 2 2 ));
            //levels (( 2 4 ));
		}
*/
    }

    // Mesh selection
    // ~~~~~~~~~~~~~~

    //locationInMesh (-50.0 0.0 100.0 );
    locationInMesh (0 -0.2 0 );

    allowFreeStandingZoneFaces true;
}

// Settings for the snapping.
snapControls
{
    nSmoothPatch 3;	    //default
    //nSmoothPatch 10;	//improved

    tolerance 2.0;

    //default
    //nSolveIter 30;
    //nRelaxIter 5;

    //Improved
    nSolveIter 100;
    nRelaxIter 10;

    // Feature snapping

        nFeatureSnapIter 10;
        //nFeatureSnapIter 20;	//improved

        // Detect (geometric only) features by sampling the surface
        // (default=false).
        implicitFeatureSnap false;

        // Use castellatedMeshControls::features (default = true)
        explicitFeatureSnap true;

        // Detect features between multiple surfaces
        // (only for explicitFeatureSnap, default = false)
        multiRegionFeatureSnap false;
}

// Settings for the layer addition.
addLayersControls
{
    relativeSizes true;

	// Expansion factor for layer mesh
	//expansionRatio 1.0;
    expansionRatio 1.2;

	finalLayerThickness 0.5;

	//firstLayerThickness 0.1;
	//thickness 0.5

    minThickness 0.001;

    // Per final patch (so not geometry!) the layer information
    // Note: This behaviour changed after 21x. Any non-mentioned patches
    //       now slide unless:
    //          - nSurfaceLayers is explicitly mentioned to be 0.
    //          - angle to nearest surface < slipFeatureAngle (see below)
    layers
    {
		
    }

    nGrow 0;

    // Advanced settings

    featureAngle              100;
    slipFeatureAngle          30;

    nLayerIter                50;
    nRelaxedIter              20;
    nRelaxIter                5;

    nGrow                     0;

    nSmoothSurfaceNormals     1;
    nSmoothNormals            3;
    nSmoothThickness          10;
    maxFaceThicknessRatio     0.5;
    maxThicknessToMedialRatio 0.3;

    minMedialAxisAngle        90;
    nMedialAxisIter           10;

    nBufferCellsNoExtrude     0;
    additionalReporting       false;
//    nSmoothDisplacement       0;
//    detectExtrusionIsland     false;
}

// Generic mesh quality settings. At any undoable phase these determine
// where to undo.
meshQualityControls
{
    // Specify mesh quality constraints in separate dictionary so can
    // be reused (e.g. checkMesh -meshQuality)
    #include "meshQualityDict"

    // Optional : some meshing phases allow usage of relaxed rules.
    // See e.g. addLayersControls::nRelaxedIter.
    relaxed
    {
        // Maximum non-orthogonality allowed. Set to 180 to disable.
        maxNonOrtho 75;
    }

    //minFlatness 0.5;

    // Advanced

        // Number of error distribution iterations
        nSmoothScale 4;
        // amount to scale back displacement at error points
        errorReduction 0.75;
}

// Advanced

//debug 0;
//debug 3;

//// Debug flags
/*
debugFlags
(
    mesh            // write intermediate meshes
    intersections   // write current mesh intersections as .obj files
    featureSeeds    // write information about explicit feature edge
                    // refinement
    attraction      // write attraction as .obj files
    layerInfo       // write information about layers
);
*/

//
//// Write flags
/*
writeFlags
(
    scalarLevels    // write volScalarField with cellLevel for postprocessing
    layerSets       // write cellSets, faceSets of faces in layer
    layerFields     // write volScalarField for layer coverage
);
*/

// Merge tolerance. Is fraction of overall bounding box of initial mesh.
// Note: the write tolerance needs to be higher than this.
mergeTolerance 1e-6;

// ************************************************************************* //

